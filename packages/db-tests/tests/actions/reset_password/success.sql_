

\set role         $$'app_owner'$$
\set user_id      $$'00000000-0000-0000-0000-000000000001'$$
\set email        $$'user@mail.com'$$
\set password     $$'secret_pass'$$
\set token        $$'some-token'$$
\set new_password $$'new_secret_pass'$$

begin;

select no_plan();

insert into app_public.users
  (id, email, first_name, last_name, is_confirmed, password_hash, reset_password_token)
  values
  (:user_id, :email, random_string(), random_string(), true, crypt(:password, gen_salt('bf')), :token);

-- Spy on function

select pgtest.spy('app_private', 'rabbitmq__send_password_was_changed_mail', ARRAY['app_public.users']);

-- Spy END

-- Test body
set local role :role;
select is(current_user, :role);

prepare do_stuff as
  select app_public.reset_password(:token, :new_password);

prepare expected as values
  (('app_owner', :user_id)::app_public.jwt);

select set_eq(
  'do_stuff',
  'expected'
);

-- Test body END

-- Check function has been called

set local role 'app_admin';

select pgtest.assert_called(pgtest.get_mock_id('app_private', 'rabbitmq__send_password_was_changed_mail', ARRAY['app_public.users']), 1);

select finish();

rollback;
