module Webpack.BuildManifestPlugin where

import Protolude
import NextjsApp.Manifest.ServerBuildManifest

foreign import webpackEntrypontName :: WebpackEntrypont -> Effect String

foreign import webpackEntrypontGetFiles :: WebpackEntrypont -> Effect (Array String)

foreign import rawSource :: String -> RawSource

-- | printBuildManifest ::

foreign import compilationSetAsset :: Compilation -> String -> RawSource -> Unit

foreign import compilationGetEntrypointValues :: Compilation -> Object WebpackEntrypont

data WebpackPlugin

type Callback = Unit -> Effect Unit

foreign import mkBuildManifestPlugin :: (EffectFn1 Compilation Unit) -> WebpackPlugin

buildManifestPlugin :: WebpackPlugin
buildManifestPlugin = mkBuildManifestPlugin $ mkEffectFn1 \compilation -> do
  (entrypointValues :: Object WebpackEntrypont) <- compilationGetEntrypointValues compilation

  -- | const pages = R.map(
  -- |   entrypoint => {
  -- |     const name = entrypoint.name
  -- |     const files = entrypoint.getFiles()

  -- |     const [css, nonCss] = R.partition(R.test(/\.css$/), files)
  -- |     const [js, other] = R.partition(R.test(/\.js$/), nonCss)

  -- |     if (!RA.isEmptyArray(other)) {
  -- |       console.log(other)
  -- |       throw new Error('should be empty')
  -- |     }

  -- |     return [
  -- |       name,
  -- |       {
  -- |         css: R.map((x) => "/" + x, css),
  -- |         js: R.map((x) => "/" + x, js)
  -- |       },
  -- |     ]
  -- |   },
  -- |   Array.from(compilation.entrypoints.values())
  -- | )

  -- | const pages_ = R.fromPairs(pages)

  -- | const assetMap = {
  -- |   pages: R.dissoc('main', pages_),
  -- |   main: R.prop('main', pages_)
  -- | }

  let (manifest :: BuildManifest) = undefined

  let (json :: Json) = ArgonautCodecs.encodeJson manifest

  compilationSetAsset compilation "build-manifest.json" (rawSource $ strintifyWithIndent 2 json)
