"""All input for the `confirm` mutation."""
input ConfirmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirm` mutation."""
type ConfirmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByUserId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""All input for the create `UserOauth` mutation."""
input CreateUserOauthInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserOauth` to be created by this mutation."""
  userOauth: UserOauthInput!
}

"""The output of our create `UserOauth` mutation."""
type CreateUserOauthPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOauth` that was created by this mutation."""
  userOauth: UserOauth

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOauth`. May be used by Relay 1."""
  userOauthEdge(
    """The method to use when ordering `UserOauth`."""
    orderBy: [UserOauthsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOauthsEdge
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deletePostByRowId` mutation."""
input DeletePostByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByUserId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserByRowId` mutation."""
input DeleteUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteUserOauthByRowId` mutation."""
input DeleteUserOauthByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""
All input for the `deleteUserOauthByServiceAndServiceIdentifier` mutation.
"""
input DeleteUserOauthByServiceAndServiceIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  serviceIdentifier: String!
}

"""All input for the `deleteUserOauth` mutation."""
input DeleteUserOauthInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOauth` to be deleted.
  """
  id: ID!
}

"""The output of our delete `UserOauth` mutation."""
type DeleteUserOauthPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOauth` that was deleted by this mutation."""
  userOauth: UserOauth
  deletedUserOauthId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOauth`. May be used by Relay 1."""
  userOauthEdge(
    """The method to use when ordering `UserOauth`."""
    orderBy: [UserOauthsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOauthsEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar Jwt

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `UserOauth`."""
  createUserOauth(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: CreateUserOauthInput!
  ): CreateUserOauthPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePostByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdatePostByRowIdInput!
  ): UpdatePostPayload

  """Updates a single `UserOauth` using its globally unique id and a patch."""
  updateUserOauth(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdateUserOauthInput!
  ): UpdateUserOauthPayload

  """Updates a single `UserOauth` using a unique key and a patch."""
  updateUserOauthByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdateUserOauthByRowIdInput!
  ): UpdateUserOauthPayload

  """Updates a single `UserOauth` using a unique key and a patch."""
  updateUserOauthByServiceAndServiceIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdateUserOauthByServiceAndServiceIdentifierInput!
  ): UpdateUserOauthPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdateUserByRowIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePostByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeletePostByRowIdInput!
  ): DeletePostPayload

  """Deletes a single `UserOauth` using its globally unique id."""
  deleteUserOauth(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeleteUserOauthInput!
  ): DeleteUserOauthPayload

  """Deletes a single `UserOauth` using a unique key."""
  deleteUserOauthByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeleteUserOauthByRowIdInput!
  ): DeleteUserOauthPayload

  """Deletes a single `UserOauth` using a unique key."""
  deleteUserOauthByServiceAndServiceIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeleteUserOauthByServiceAndServiceIdentifierInput!
  ): DeleteUserOauthPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeleteUserByRowIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """Sets is_confirmed = true if token is right"""
  confirm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: ConfirmInput!
  ): ConfirmPayload

  """
  Creates a jwt token that will securely identify a users and give them certain permissions.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """Registers a single user and creates an account in our forum."""
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """Resends confirmation email if user exists and is not already confirmed"""
  resendConfirmation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: ResendConfirmationInput!
  ): ResendConfirmationPayload

  """Changes password if reset password token is valid"""
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """Resends reset password email if user exists and is confirmed"""
  sendResetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: SendResetPasswordInput!
  ): SendResetPasswordPayload

  """Upserts a single `Post`."""
  upsertPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpsertPostInput!
  ): UpsertPostPayload

  """Upserts a single `UserOauth`."""
  upsertUserOauth(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpsertUserOauthInput!
  ): UpsertUserOauthPayload

  """Upserts a single `User`."""
  upsertUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.
    """
    input: UpsertUserInput!
  ): UpsertUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!
  content: String!
  userId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Post`."""
  userByUserId: User
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical â€˜and.â€™
"""
input PostCondition {
  """Checks for equality with the objectâ€™s `rowId` field."""
  rowId: UUID

  """Checks for equality with the objectâ€™s `name` field."""
  name: String

  """Checks for equality with the objectâ€™s `content` field."""
  content: String

  """Checks for equality with the objectâ€™s `userId` field."""
  userId: UUID

  """Checks for equality with the objectâ€™s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the objectâ€™s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Post`"""
input PostInput {
  rowId: UUID
  name: String!
  content: String
  userId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  rowId: UUID
  name: String
  content: String
  userId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  USER_ID_ASC
  USER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Post`."""
  allPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection
  postByRowId(rowId: UUID!): Post
  userOauthByRowId(rowId: UUID!): UserOauth
  userOauthByServiceAndServiceIdentifier(service: String!, serviceIdentifier: String!): UserOauth
  userByRowId(rowId: UUID!): User
  userByEmail(email: String!): User

  """gets the users who was identified by our jwt."""
  currentUser: User

  """Reads a single `Post` using its globally unique `ID`."""
  post(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    id: ID!
  ): Post

  """Reads a single `UserOauth` using its globally unique `ID`."""
  userOauth(
    """The globally unique `ID` to be used in selecting a single `UserOauth`."""
    id: ID!
  ): UserOauth

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User
}

"""All input for the `register` mutation."""
input RegisterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `resendConfirmation` mutation."""
input ResendConfirmationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `resendConfirmation` mutation."""
type ResendConfirmationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  newPassword: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `sendResetPassword` mutation."""
input SendResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `sendResetPassword` mutation."""
type SendResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePostByRowId` mutation."""
input UpdatePostByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
  rowId: UUID!
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByUserId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  email: String!
}

"""All input for the `updateUserByRowId` mutation."""
input UpdateUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  rowId: UUID!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUserOauthByRowId` mutation."""
input UpdateUserOauthByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserOauth` being updated.
  """
  userOauthPatch: UserOauthPatch!
  rowId: UUID!
}

"""
All input for the `updateUserOauthByServiceAndServiceIdentifier` mutation.
"""
input UpdateUserOauthByServiceAndServiceIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserOauth` being updated.
  """
  userOauthPatch: UserOauthPatch!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  serviceIdentifier: String!
}

"""All input for the `updateUserOauth` mutation."""
input UpdateUserOauthInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOauth` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `UserOauth` being updated.
  """
  userOauthPatch: UserOauthPatch!
}

"""The output of our update `UserOauth` mutation."""
type UpdateUserOauthPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOauth` that was updated by this mutation."""
  userOauth: UserOauth

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOauth`. May be used by Relay 1."""
  userOauthEdge(
    """The method to use when ordering `UserOauth`."""
    orderBy: [UserOauthsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOauthsEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the upsert `Post` mutation."""
input UpsertPostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be upserted by this mutation."""
  post: PostInput!
}

"""The output of our upsert `Post` mutation."""
type UpsertPostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was upserted by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByUserId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the upsert `User` mutation."""
input UpsertUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be upserted by this mutation."""
  user: UserInput!
}

"""All input for the upsert `UserOauth` mutation."""
input UpsertUserOauthInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserOauth` to be upserted by this mutation."""
  userOauth: UserOauthInput!
}

"""The output of our upsert `UserOauth` mutation."""
type UpsertUserOauthPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOauth` that was upserted by this mutation."""
  userOauth: UserOauth

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOauth`. May be used by Relay 1."""
  userOauthEdge(
    """The method to use when ordering `UserOauth`."""
    orderBy: [UserOauthsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOauthsEdge
}

"""The output of our upsert `User` mutation."""
type UpsertUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was upserted by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  firstName: String!
  lastName: String!
  email: String!
  avatarUrl: String
  isConfirmed: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Post`."""
  postsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!

  """
  a userâ€™s full name which is a concatenation of their first and last name.
  """
  fullName: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  rowId: UUID
  firstName: String!
  lastName: String!
  email: String!
  avatarUrl: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserOauth implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  serviceIdentifier: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""An input for mutations affecting `UserOauth`"""
input UserOauthInput {
  rowId: UUID

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  serviceIdentifier: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserOauth`. Fields that are set will be updated.
"""
input UserOauthPatch {
  rowId: UUID

  """The login service used, e.g. `twitter` or `github`."""
  service: String

  """A unique identifier for the user within the login service."""
  serviceIdentifier: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A `UserOauth` edge in the connection."""
type UserOauthsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserOauth` at the end of the edge."""
  node: UserOauth
}

"""Methods to use when ordering `UserOauth`."""
enum UserOauthsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERVICE_ASC
  SERVICE_DESC
  SERVICE_IDENTIFIER_ASC
  SERVICE_IDENTIFIER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  rowId: UUID
  firstName: String
  lastName: String
  email: String
  avatarUrl: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  IS_CONFIRMED_ASC
  IS_CONFIRMED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
